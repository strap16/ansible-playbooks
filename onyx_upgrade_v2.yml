- name: onyx_upgrade
#  hosts: ONYX:&{{limit_hosts}}
  hosts: ONYX
  gather_facts: no
  strategy: free
  connection: network_cli
  become: yes
  become_method: enable
  vars:
    ansible_network_os: onyx
    local_path: "/mswg/release/sx_mlnx_os/"
    cpu: "X86_64"   # X86_64 | PPC_M460EX
    user: user
    password: password
    force_upgrade_downgrade: "False"
    version: 3.8.2204
    skip_version_check: "False"
    transfer_protocol: scp
    source_file1: "{{local_path}}/sx_mlnx_os-{{ version }}/{{ cpu  }}/image-{{ cpu }}-{{ version }}.img"
    source_file2: "{{local_path}}/image-{{ cpu }}-{{ version }}.img"
    destination_folder: /var/opt/tms/images/
    reload: True
    ignore_net_errors: "True"
  remote_user: admin
  tasks:

# get current switch Onyx version with command "show version concise" and save it to a variable named curr_version

    - name: get_current_switch_version
      onyx_command:
        commands: show version concise
      register: curr_version
# save the onyx version as a fact named current_version
    - name: set_fact_current_version
      set_fact:
        current_version: "{{curr_version.stdout[0].split()[1] }}"
# print the current version
    - name: print_current_version
      debug:
          msg: "Current version: {{ current_version }}"

# End the play for the device if the current version is the same as what is needed to install
    - block:
      - name: print_current_version==requested_version
        debug:
          msg: "Requested Version is already Installed and is currently active = {{ current_version }}"
      - meta: end_host
      when:
          - current_version == version
          - skip_version_check == "False"

# in case current version is not the same same as the needed version - start the upgrade


    - name: need_to_upgrade
      block:
# check if the img file exits in location #1
      - name: check_source_file1_existence
        stat:
          path: "{{ source_file1 }}"
        delegate_to: localhost
        register: source_file1_exists
# check if the img file exits in location #2
      - name: check_source_file2_existence
        stat:
          path: "{{ source_file2 }}"
        delegate_to: localhost
        register: source_file2_exists

      - name: print_existence_of_file1
        debug:
          var: source_file1_exists
          verbosity: 2

      - name: print_existence_of_file2
        debug:
          var: source_file2_exists
          verbosity: 2

# Copy image file to the switch using the net_put module using scp

      - name: copy_file1_to_device
        net_put:
          dest: "{{ destination_folder }}"
          mode: binary
          protocol: "{{ transfer_protocol }}"
          src: "{{ source_file1 }}"
        tags: copy_to_onyx
        ignore_errors: yes
        when:
         - source_file1_exists.stat.exists
         - ignore_net_errors == "True"

      - name: copy_file2_to_device
        net_put:
          dest: "{{ destination_folder }}"
          mode: binary
          protocol: "{{ transfer_protocol }}"
          src: "{{ source_file2 }}"
        ignore_errors: yes
        tags: copy_to_onyx
        when:
           - source_file1_exists.stat.exists == False
           - source_file2_exists.stat.exists
           - ignore_net_errors == "True"


      - name: image install
        onyx_command:
           commands: image install image-{{ cpu }}-{{ version }}.img
        tags: image_install

      # image boot next + save config + no boot next fallback-reboot enable in case  force_upgrade_downgrade == True
      - name: image boot next and reload with upgrade_downgrade_force
        onyx_config:
            lines:
              - image boot next
              - configuration write
              - no boot next fallback-reboot enable
            backup: yes
        when:
         - force_upgrade_downgrade == "True"
        ignore_errors: yes
        tags: boot_next

      # # image boot next + save config
      - name: image boot next and reload without upgrade_downgrade_force
        onyx_config:
            lines:
              - image boot next
              - configuration write
            backup: yes
        when:
          - force_upgrade_downgrade != "True"
      #  ignore_errors: yes
        tags: boot_next

      # run the reload command
      - name: reload
        onyx_config:
            commands:
                - reload
        when: reload == True
        ignore_errors: yes
        tags: reload

        # use wait_for to wait for port 22 to be available on the switch after reboot
      - name: wait for switch to reboot
        delegate_to: localhost
        wait_for:
         host: "{{ inventory_hostname }}"
         port: 22
         delay: 160
         timeout: 800
        become: false
        tags: wait_for_ssh

      # wait for full cli to be availble by waiting for output of "show version concise" to have the new version
      - name: wait_for_switch_cli
        onyx_command:
          commands: show version concise
          wait_for:
            - result[0] contains {{version}}
        tags: wait_for_switch_cli
        register: new_version

      # print the new version after reboot
      - name: print_new_version
        debug:
          msg: "New version after upgrade: {{new_version.stdout}}"
        tags: print_new_version
