- name: onyx_upgrade
  hosts: ONYX
  gather_facts: no
  strategy: free
  connection: network_cli
  become: yes
  become_method: enable
  vars:
    ansible_network_os: onyx
    force_upgrade_downgrade: False
    fetch: True
    transfer_protocol: scp
    server_ip: ""
    server_user: ""
    server_password: ""
    img_file: ""
    fail_on_file: True
    destination_folder: /var/opt/tms/images/
    reload: True
    e_config_backup: true
    config_backup: "{{ e_config_backup  | bool }}"
  remote_user: admin
  tasks:

# get current switch Onyx version with command "show version concise" and save it to a variable named curr_version

    - name: get_current_switch_version
      onyx_command:
        commands: show version concise
      register: curr_version
# save the onyx version as a fact named current_version
    - name: set_fact_current_version
      set_fact:
        current_version: "{{curr_version.stdout[0].split()[1] }}"
# print the current version
    - name: print_current_version
      debug:
          msg: "Current version: {{ current_version }}"

# in case current version is not the same as the needed version - start the upgrade
    - name: check_file_exists
      stat:
        path: "{{ img_file }}"
      delegate_to: localhost
      register: file_exists
      tags: check_img_file

    - name: file_doesnt_exists
      fail:
        msg: "file {{img_file}} doesnt exist"
      when:
         - not file_exists.stat.exists
         - fail_on_file | bool
      tags: fail_on_non_existing_file

  # Copy image file to the switch using the net_put module using scp
    - name: need_to_upgrade
      block:
        - name: get_file_basename
          set_fact:
            img_name: "{{ img_file | basename }}"
          when:
             - file_exists.stat.exists

        - name: copy_file_to_device
          net_put:
              dest: "{{ destination_folder }}"
              mode: binary
              protocol: "{{ transfer_protocol }}"
              src: "{{ img_file }}"
          tags: copy_to_onyx
          #ignore_errors: yes
          when:
           - not fetch | bool
     # fetch the image file using a cli command
        - name: fetch_image
          onyx_command:
              commands: image fetch {{transfer_protocol}}://{{server_user}}:{{server_password}}@{{server_ip}}:/{{img_file}}
          tags: fetch_image
          when:
            - fetch | bool


     #  install the image
        - name: image install
          onyx_command:
               commands: image install {{ img_file | basename }}
          tags: image_install

      # image boot next + save config + no boot next fallback-reboot enable in case  force_upgrade_downgrade == True
        - name: image boot next and reload with upgrade_downgrade_force
          onyx_config:
                lines:
                  - image boot next
                  - configuration write
                  - no boot next fallback-reboot enable
                backup: "{{ config_backup }}"
          when:
             - force_upgrade_downgrade | bool
          ignore_errors: yes
          tags: boot_next

      # image boot next + save config
        - name: image boot next and reload without upgrade_downgrade_force
          onyx_config:
                lines:
                  - image boot next
                  - configuration write
                backup: "{{ config_backup }}"
          when:
              - not force_upgrade_downgrade | bool
          tags: boot_next

      # run the reload command, need to set ignore errors to yes since the ssh is broken with the reload command
        - name: reload
          onyx_config:
                commands:
                    - reload
          when: reload | bool
          ignore_errors: yes
          tags: reload

            # use wait_for to wait for port 22 to be available on the switch after reboot
        - name: wait for switch to reboot - inventory_hostname
          delegate_to: localhost
          wait_for:
             host: "{{ ansible_host }}"
             port: 22
             delay: 360
             timeout: 800
          become: false
          tags: wait_for_ssh
          when:
            - ansible_host == inventory_hostname

        - name: wait for switch to reboot ansible_host
          delegate_to: localhost
          wait_for:
             host: "{{ ansible_host }}"
             port: 22
             delay: 360
             timeout: 800
          become: false
          tags: wait_for_ssh
          when:
            - ansible_host != inventory_hostname

          # wait for full cli to be availble by waiting for output of "show version concise" to have the new version
        - name: wait_for_switch_cli
          onyx_command:
            commands: show version concise
            wait_for:
              - result[0] contains x86_64
          tags: wait_for_switch_cli
          register: new_version

          # print the new version after reboot
        - name: print_new_version
          debug:
            msg: "New version after upgrade: {{new_version.stdout}}"
          tags: print_new_version
      when:
        - file_exists.stat.exists
